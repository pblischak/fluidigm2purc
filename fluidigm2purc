#!/usr/bin/env python

# fluidigm2purc
# Written by PD Blischak

from __future__ import print_function
import subprocess
import os
import sys
import argparse
import gzip
import itertools

__version__ = "This is fluidigm2purc v0.1.0-alpha (April 2017)."

def read_fastq(_prefix, ):
    """
    Function for reading in and parsing paired-end FASTQ files.
    """


def run_sickle():
    """
    Runs the program sickle to trim and filters reads.

    Sickle:

    """
    print("\n**** 1. Trimming and filtering paired-end reads with sickle ****\n\n")


def run_flash2():
    """
    Run the program flash2 to merge paired-end reads.

    FLASH2:

    """
    print("\n**** 2. Merging reads using flash2 ****\n\n")

def run_pear():
    """
    Run the program pear to merge paired-end reads.

    PEAR:
    """
    print("\n**** 2. Merging reads using pear ****\n\n")

def raise_error(error_message, bad_arg):
    print("\n** ", error_message, " **\n", sep='')
    print("  => Option provided: ", bad_arg, "\n", sep='')
    #sys.exit()
    quit()

def main():
    """

    """
    parser = argparse.ArgumentParser(description="Options for fluidigm2purc",
                                     add_help=True)
    parser.add_argument('-v', '--version', action="version",
                        version=__version__)
    required = parser.add_argument_group("required arguments")
    required.add_argument('-p', '--prefix', action="store", required=True,
                          metavar='\b', help="prefix for paired-end FASTQ files")
    required.add_argument('-m', '--merger', action="store", required=True, type=str,
                          metavar='\b', help="program for merging pair-end reads (flash2 or pear)")
    additional = parser.add_argument_group("additional arguments")
    additional.add_argument('-o', '--outname', action="store", type=str, default="output.fasta",
                            metavar='\b', help="name for output fasta file")

    args    = parser.parse_args()
    prefix  = args.prefix
    merger  = args.merger
    if merger != "flash2" and merger != "pear":
        raise_error("ERROR: Program to merge reads must be equal to \"flash2\" or \"pear\".", merger)
    outname = args.outname

    run_sickle(prefix)

    if(merger == "flash2"):
        run_flash2()
    elif(merger == "pear"):
        run_pear()
    else:
        raise_error("ERROR: Program to merge reads must be equal to \"flash2\" or \"pear\".", merger)

if __name__ == "__main__":
    # Run the main script if called from command line.
    main()
